---
title: Localisation
---

markdown:
  The simplest way of adding textual information like labels and hints to
  forms is to provide strings as arguments to the form helpers.

  ```language-ruby
  = f.govuk_text_field :name, label: { text: 'Your full name' }
  ```

  On larger, more-complex projects, copy is spread throughout the application
  and often duplicated, making it difficult for content designers to make
  changes.

  Many teams approach this problem by making use of
  #{link_to('Rails’ excellent localisation functionality', rails_localisation_link).html_safe},
  allowing text to be stored in locale dictionaries. This allows editors to
  make changes without the risk of breaking templates and having to learn
  templating languages and hunt down content.

  You can use HTML in locales if you append the suffix `_html` to the key.

== render('/partials/example.*',
  caption: 'Populating label, caption and hint text from the localisation data',
  localisation: favourite_kind_of_hat_locale,
  code: favourite_kind_of_hat) do

  markdown:
    Note that despite the `text` attribute being omitted from the label options
    hash, the other display and formatting parameters can be supplied and work
    in the normal manner.

markdown:
  Radio and check box labels use a special key in the locale dictionary
  composed from the attribute name and the suffix `_options`. This makes it
  possible to localise the fieldset legend and each of the individual choices
  separately.

== render('/partials/example.*',
  caption: 'Populating radio labels from the localisation data',
  localisation: contact_type_locale,
  code: contact_type,
  sample_data: contact_types_data_raw)

== render('/partials/example.*',
  caption: 'Populating check box labels from the localisation data',
  localisation: department_check_boxes_locale,
  code: department_check_boxes,
  sample_data: departments_value_data_raw)

== render('/partials/example.*',
  caption: 'A more comprehensive example of localised check boxes',
  localisation: movie_genre_check_boxes_locale,
  code: movie_genre_check_boxes) do
  == render('/partials/fieldset-warning.*', input_type: 'checkbox')

== render('/partials/example.*',
  caption: 'Customising locale structure',
  localisation: custom_locale,
  code: role_name,
  custom_config: custom_locale_config,
  raw_config: custom_locale_config_raw) do

  markdown:
    There are many approaches to organising localisation data and while the
    default will work for most projects, sometimes a different approach can
    be beneficial. This is especially true when working with external
    localisation agencies or when dealing with large volumes of copy.

    To customise the location of our localisation strings, we can
    #{link_to('configure', '/introduction/configuration').html_safe} the schema as part of the application’s initialisation process.

    ### Contexts

    There are four contexts supported by the form builder: _label_, _legend_,
    _caption_ and _hint_. Custom locale schemas are configured using an array
    of symbols that match your locale structure.

    The special value `__context__` is used to represent the current
    translation context. It will automatically be replaced with either _label_,
    _legend_, _caption_ or _hint_ when the translation key is generated.

    When retrieving a localised string the builder first checks whether
    a contextual schema has been set for the context. If there hasn’t,
    the `localisation_schema_fallback` key will be used. **It is the only
    schema set by default**.

  .govuk-inset-text
    markdown:
      Captions are rendered inside the corresponding `label` or `legend` tag.
      If the label or legend is hidden or not rendered, the caption won’t be
      either.
